%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\VHOUTVEJ\Documents\MATLAB\thesis\data\MB_Bon_tmt_TargetPeptideSpectrumMatch.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/09/06 12:06:58

%% Initialize variables.
if ~exist('INTENSITIES_ONLY','var')
    INTENSITIES_ONLY = true;
end
filename = 'C:\Users\VHOUTVEJ\Documents\MATLAB\thesis\data\MB_Bon_tmt_TargetPeptideSpectrumMatch.txt';
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,7,8,9,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,32,37,40,41,42,43,44,45,46,47,48,49,50,51,52]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
if INTENSITIES_ONLY==true
    rawNumericColumns = raw(:, [47,48,49,50,51,52]);
else
    rawNumericColumns = raw(:, [3,7,8,9,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,32,37,40,41,42,43,44,45,46,47,48,49,50,51,52]);
    rawCellColumns = raw(:, [1,2,4,5,6,10,11,23,29,30,31,33,34,35,36,38,39]);
end

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
if INTENSITIES_ONLY==true
    data = [cell2mat(rawNumericColumns(:, 1)) cell2mat(rawNumericColumns(:, 2)) cell2mat(rawNumericColumns(:, 3)) cell2mat(rawNumericColumns(:, 4)) cell2mat(rawNumericColumns(:, 5)) cell2mat(rawNumericColumns(:, 6))];
%     Ch126 = cell2mat(rawNumericColumns(:, 1));
%     Ch127 = cell2mat(rawNumericColumns(:, 2));
%     Ch128 = cell2mat(rawNumericColumns(:, 3));
%     Ch129 = cell2mat(rawNumericColumns(:, 4));
%     Ch130 = cell2mat(rawNumericColumns(:, 5));
%     Ch131 = cell2mat(rawNumericColumns(:, 6));
    data=data(2:end,:);
else
    Checked = rawCellColumns(:, 1);
    Confidence = rawCellColumns(:, 2);
    IdentifyingNode = cell2mat(rawNumericColumns(:, 1));
    PSMAmbiguity = rawCellColumns(:, 3);
    AnnotatedSequence = rawCellColumns(:, 4);
    Modifications = rawCellColumns(:, 5);
    ProteinGroups = cell2mat(rawNumericColumns(:, 2));
    Proteins = cell2mat(rawNumericColumns(:, 3));
    MasterProteinAccessions = cell2mat(rawNumericColumns(:, 4));
    ProteinAccessions = rawCellColumns(:, 6);
    ProteinDescriptions = rawCellColumns(:, 7);
    MissedCleavages = cell2mat(rawNumericColumns(:, 5));
    Charge = cell2mat(rawNumericColumns(:, 6));
    DeltaScore = cell2mat(rawNumericColumns(:, 7));
    DeltaCn = cell2mat(rawNumericColumns(:, 8));
    Rank = cell2mat(rawNumericColumns(:, 9));
    SearchEngineRank = cell2mat(rawNumericColumns(:, 10));
    mzDa = cell2mat(rawNumericColumns(:, 11));
    MHDa = cell2mat(rawNumericColumns(:, 12));
    DeltaMppm = cell2mat(rawNumericColumns(:, 13));
    DeltamzDa = cell2mat(rawNumericColumns(:, 14));
    Intensity = cell2mat(rawNumericColumns(:, 15));
    ActivationType = rawCellColumns(:, 8);
    MSOrder = cell2mat(rawNumericColumns(:, 16));
    IsolationInterference = cell2mat(rawNumericColumns(:, 17));
    IonInjectTimems = cell2mat(rawNumericColumns(:, 18));
    RTmin = cell2mat(rawNumericColumns(:, 19));
    FirstScan = cell2mat(rawNumericColumns(:, 20));
    SpectrumFile = rawCellColumns(:, 9);
    IonsMatched = rawCellColumns(:, 10);
    Annotation = rawCellColumns(:, 11);
    XCorr = cell2mat(rawNumericColumns(:, 21));
    IonsScore = rawCellColumns(:, 12);
    IdentityStrict = rawCellColumns(:, 13);
    IdentityRelaxed = rawCellColumns(:, 14);
    ExpectationValue = rawCellColumns(:, 15);
    ReporterQuanResultID = cell2mat(rawNumericColumns(:, 22));
    QuanInfo = rawCellColumns(:, 16);
    QuanUsage = rawCellColumns(:, 17);
    DMSOBONDMSOBON = cell2mat(rawNumericColumns(:, 23));
    EverolimusBONDMSOBON = cell2mat(rawNumericColumns(:, 24));
    UngroupedRatiosF2127SampleDMSOBON126ControlDMSOBON = cell2mat(rawNumericColumns(:, 25));
    UngroupedRatiosF2128SampleDMSOBON126ControlDMSOBON = cell2mat(rawNumericColumns(:, 26));
    UngroupedRatiosF2129SampleEverolimusBON126ControlDMSOBON = cell2mat(rawNumericColumns(:, 27));
    UngroupedRatiosF2130SampleEverolimusBON126ControlDMSOBON = cell2mat(rawNumericColumns(:, 28));
    UngroupedRatiosF2131SampleEverolimusBON126ControlDMSOBON = cell2mat(rawNumericColumns(:, 29));
    VarName47 = cell2mat(rawNumericColumns(:, 30));
    VarName48 = cell2mat(rawNumericColumns(:, 31));
    VarName49 = cell2mat(rawNumericColumns(:, 32));
    VarName50 = cell2mat(rawNumericColumns(:, 33));
    VarName51 = cell2mat(rawNumericColumns(:, 34));
    VarName52 = cell2mat(rawNumericColumns(:, 35));
end

%% Clear temporary variables
clearvars INTENSITIES_ONLY filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;